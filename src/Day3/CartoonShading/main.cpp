#include <cmath>
#include <cstdio>
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

#define GLAD_GL_IMPLEMENTATION
#include <glad/gl.h>

#define GLFW_INCLUDE_GLU
#include <GLFW/glfw3.h>

#define GLM_FORCE_RADIANS        // ラジアン単位の角度を使うことを強制する
#define GLM_ENABLE_EXPERIMENTAL  // glm/gtx/**.hppを使うのに必要
#include <glm/glm.hpp>
// glm::vec型をポインタに変換 / Convert glm::vec types to pointer
#include <glm/gtc/type_ptr.hpp>
// GLMの行列変換のためのユーティリティ関数 GLM's utility functions for matrix transformation
#include <glm/gtx/transform.hpp>

// 画像のロードに必要 / Required to load images
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

// OBJメッシュ読み込み用のライブラリ
// Library for loading OBJ file
#define TINYOBJLOADER_IMPLEMENTATION
#include "tiny_obj_loader.h"

// 画像のパスなどが書かれた設定ファイル
// Config file storing image locations etc.
#include "common.h"

static int WIN_WIDTH = 500;                      // ウィンドウの幅 / Window width
static int WIN_HEIGHT = 500;                     // ウィンドウの高さ / Window height
static const char* WIN_TITLE = "OpenGL Course";  // ウィンドウのタイトル / Window title

// シェーダ言語のソースファイル / Shader source files
static std::string VERT_SHADER_FILE = std::string(SHADER_DIRECTORY) + "render.vert";
static std::string FRAG_SHADER_FILE = std::string(SHADER_DIRECTORY) + "render.frag";

// メッシュモデルのファイル
// Mesh model file
static const std::string MESH_FILE = std::string(DATA_DIRECTORY) + "bunny.obj";

static const float contourThreshold = 0.6f;
static const float diffuseThreshold = 0.2f;
static const float specularThreshold = 0.95f;

static size_t indexBufferSize = 0;
static glm::vec2 textureSize({ 512, 512 });

// 頂点クラス
// Vertex class
struct Vertex {
	Vertex(const glm::vec3& position_, const glm::vec3& normal_)
		: position(position_)
		, normal(normal_) {
	}

	glm::vec3 position;
	glm::vec3 normal;
};

// バッファを参照する番号
// Indices for vertex/index buffers
GLuint vaoId;
GLuint vertexBufferId;
GLuint indexBufferId;

// シェーダプログラムを参照する番号
// Index for a shader program
GLuint programId;

// 立方体の回転角度
// Rotation angle for animating a cube
static float theta = 0.0f;

// シェーディングのためのマテリアル情報
// Material parameters for shading
static const glm::vec3 lightPos = glm::vec3(5.0f, 5.0f, 5.0f);
static const std::string TEX_FILE = std::string(DATA_DIRECTORY) + "cartoon_shading.png";
static const std::string TEX_FILE_DOTS = std::string(DATA_DIRECTORY) + "dots.png";
static const std::string TEX_FILE_LINES = std::string(DATA_DIRECTORY) + "lines.png";
GLuint textureId;
GLuint textureId_dots;
GLuint textureId_lines;

// VAOの初期化
void initVAO() {
	// メッシュファイルの読み込み
	// Load mesh file
	tinyobj::attrib_t attrib;
	std::vector<tinyobj::shape_t> shapes;
	std::vector<tinyobj::material_t> materials;
	std::string err;
	bool success = tinyobj::LoadObj(&attrib, &shapes, &materials, &err, MESH_FILE.c_str());
	if (!err.empty()) {
		std::cerr << "[WARNING] " << err << std::endl;
	}

	if (!success) {
		std::cerr << "Failed to load OBJ file: " << MESH_FILE << std::endl;
		exit(1);
	}

	// Vertex配列の作成
	// Create vertex array
	std::vector<Vertex> vertices;
	std::vector<uint32_t> indices;
	for (int s = 0; s < shapes.size(); s++) {
		const tinyobj::mesh_t& mesh = shapes[s].mesh;
		for (int i = 0; i < mesh.indices.size(); i++) {
			const tinyobj::index_t& index = mesh.indices[i];

			glm::vec3 position, normal;

			if (index.vertex_index >= 0) {
				position = glm::vec3(attrib.vertices[index.vertex_index * 3 + 0],
					attrib.vertices[index.vertex_index * 3 + 1],
					attrib.vertices[index.vertex_index * 3 + 2]);
			}

			if (index.normal_index >= 0) {
				normal = glm::vec3(attrib.normals[index.normal_index * 3 + 0],
					attrib.normals[index.normal_index * 3 + 1],
					attrib.normals[index.normal_index * 3 + 2]);
			}

			const Vertex vertex(position, normal);

			indices.push_back(vertices.size());
			vertices.push_back(vertex);
		}
	}

	// VAOの作成
	// Create VAO
	glGenVertexArrays(1, &vaoId);
	glBindVertexArray(vaoId);

	// 頂点バッファオブジェクトの作成
	// Create vertex buffer object
	glGenBuffers(1, &vertexBufferId);
	glBindBuffer(GL_ARRAY_BUFFER, vertexBufferId);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Vertex) * vertices.size(), vertices.data(), GL_STATIC_DRAW);

	// 頂点バッファに対する属性情報の設定
	// Setup attributes for vertex buffer object
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex, position));

	glEnableVertexAttribArray(1);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(Vertex), (void*)offsetof(Vertex, normal));

	// 頂点番号バッファオブジェクトの作成
	// Create index buffer object
	glGenBuffers(1, &indexBufferId);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBufferId);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(unsigned int) * indices.size(),
		indices.data(), GL_STATIC_DRAW);

	// 頂点バッファのサイズを変数に入れておく
	// Store size of index array buffer
	indexBufferSize = indices.size();

	// VAOをOFFにしておく
	// Temporarily disable VAO
	glBindVertexArray(0);
}

// シェーダのソースファイルをコンパイルする
// Compile a shader source
GLuint compileShader(const std::string& filename, GLuint type) {
	// シェーダの作成
	// Create a shader
	GLuint shaderId = glCreateShader(type);

	// ファイルの読み込み
	// Load source file
	std::ifstream reader;
	std::string code;

	// ファイルを開く
	// Open source file
	reader.open(filename.c_str(), std::ios::in);
	if (!reader.is_open()) {
		// ファイルを開けなかったらエラーを出して終了
		// Finish with error message if source file could not be opened
		fprintf(stderr, "Failed to load a shader: %s\n", filename.c_str());
		exit(1);
	}

	// ファイルをすべて読んで変数に格納
	// Load entire contents of a file and store to a string variable
	{
		// ファイル読み取り位置を終端に移動 / Move seek position to the end
		reader.seekg(0, std::ios::end);
		// コードを格納する変数の大きさを予約 / Reserve memory location for code characters
		code.reserve(reader.tellg());
		// ファイルの読み取り位置を先頭に移動 / Move seek position back to the beginning
		reader.seekg(0, std::ios::beg);

		// 先頭からファイルサイズ分を読んでコードの変数に格納
		// Load entire file and copy to "code" variable
		code.assign(std::istreambuf_iterator<char>(reader),
			std::istreambuf_iterator<char>());
	}

	// ファイルを閉じる
	// Close file
	reader.close();

	// コードのコンパイル
	// Compile a source code
	const char* codeChars = code.c_str();
	glShaderSource(shaderId, 1, &codeChars, NULL);
	glCompileShader(shaderId);

	// コンパイルの成否を判定する
	// Check whther compile is successful
	GLint compileStatus;
	glGetShaderiv(shaderId, GL_COMPILE_STATUS, &compileStatus);
	if (compileStatus == GL_FALSE) {
		// コンパイルが失敗したらエラーメッセージとソースコードを表示して終了
		// Terminate with error message if compilation failed
		fprintf(stderr, "Failed to compile a shader!\n");

		// エラーメッセージの長さを取得する
		// Get length of error message
		GLint logLength;
		glGetShaderiv(shaderId, GL_INFO_LOG_LENGTH, &logLength);
		if (logLength > 0) {
			// エラーメッセージを取得する
			// Get error message
			GLsizei length;
			std::string errMsg;
			errMsg.resize(logLength);
			glGetShaderInfoLog(shaderId, logLength, &length, &errMsg[0]);

			// エラーメッセージとソースコードの出力
			// Print error message and corresponding source code
			fprintf(stderr, "[ ERROR ] %s\n", errMsg.c_str());
			fprintf(stderr, "%s\n", code.c_str());
		}
		exit(1);
	}

	return shaderId;
}

// シェーダプログラムのビルド (=コンパイル＋リンク)
// Build a shader program (build = compile + link)
GLuint buildShaderProgram(const std::string& vShaderFile, const std::string& fShaderFile) {
	// 各種シェーダのコンパイル
	// Compile shader files
	GLuint vertShaderId = compileShader(vShaderFile, GL_VERTEX_SHADER);
	GLuint fragShaderId = compileShader(fShaderFile, GL_FRAGMENT_SHADER);

	// シェーダプログラムへのリンク
	// Link shader objects to the program
	GLuint programId = glCreateProgram();
	glAttachShader(programId, vertShaderId);
	glAttachShader(programId, fragShaderId);
	glLinkProgram(programId);

	// リンクの成否を判定する
	// Check whether link is successful
	GLint linkState;
	glGetProgramiv(programId, GL_LINK_STATUS, &linkState);
	if (linkState == GL_FALSE) {
		// リンクに失敗したらエラーメッセージを表示して終了
		// Terminate with error message if link is failed
		fprintf(stderr, "Failed to link shaders!\n");

		// エラーメッセージの長さを取得する
		// Get length of error message
		GLint logLength;
		glGetProgramiv(programId, GL_INFO_LOG_LENGTH, &logLength);
		if (logLength > 0) {
			// エラーメッセージを取得する
			// Get error message
			GLsizei length;
			std::string errMsg;
			errMsg.resize(logLength);
			glGetProgramInfoLog(programId, logLength, &length, &errMsg[0]);

			// エラーメッセージを出力する
			// Print error message
			fprintf(stderr, "[ ERROR ] %s\n", errMsg.c_str());
		}
		exit(1);
	}

	// シェーダを無効化した後にIDを返す
	// Disable shader program and return its ID
	glUseProgram(0);
	return programId;
}

// シェーダの初期化
// Initialization related to shader programs
void initShaders() {
	programId = buildShaderProgram(VERT_SHADER_FILE, FRAG_SHADER_FILE);
}

void setTexture(std::string filePath, GLuint* id) {
	int texWidth, texHeight, channels;
	unsigned char* bytes = stbi_load(filePath.c_str(), &texWidth, &texHeight, &channels, STBI_rgb_alpha);
	if (!bytes) {
		fprintf(stderr, "Failed to load image file: %s\n", filePath.c_str());
		exit(1);
	}

	glGenTextures(1, id);
	glBindTexture(GL_TEXTURE_2D, *id);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, texWidth, texHeight,
		0, GL_RGBA, GL_UNSIGNED_BYTE, bytes);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glGenerateMipmap(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, 0);
	stbi_image_free(bytes);
}

void initTexture() {
	setTexture(TEX_FILE, &textureId);
	setTexture(TEX_FILE_DOTS, &textureId_dots);
	setTexture(TEX_FILE_LINES, &textureId_lines);
}

// ユーザ定義のOpenGLの初期化
// User-define OpenGL initialization
void initializeGL() {
	// 深度テストの有効化
	// Enable depth testing
	glEnable(GL_DEPTH_TEST);

	// 背景色の設定 (黒)
	// Background color (black)
	glClearColor(1.0f, 1.0f, 1.0f, 1.0f);

	// VAOの初期化
	// Initialize VAO
	initVAO();

	// シェーダの用意
	// Prepare shader program
	initShaders();

	// テクスチャの初期化
	// Prepare textures
	initTexture();
}

// ユーザ定義のOpenGL描画
// User-defined OpenGL drawing
void paintGL() {
	// 背景色と深度値のクリア
	// Clear background color and depth values
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// 座標の変換
	// Coordinate transformation
	glm::mat4 projMat = glm::perspective(glm::radians(45.0f),
		(float)WIN_WIDTH / (float)WIN_HEIGHT, 0.1f, 1000.0f);

	glm::mat4 viewMat = glm::lookAt(glm::vec3(3.0f, 4.0f, 5.0f),   // 視点の位置
		glm::vec3(0.0f, 0.0f, 0.0f),   // 見ている先
		glm::vec3(0.0f, 1.0f, 0.0f));  // 視界の上方向

	glm::mat4 modelMat = glm::rotate(glm::radians(theta), glm::vec3(0.0f, 1.0f, 0.0f));

	glm::mat4 mvMat = viewMat * modelMat;
	glm::mat4 mvpMat = projMat * viewMat * modelMat;
	glm::mat4 normMat = glm::transpose(glm::inverse(mvMat));
	glm::mat4 lightMat = viewMat;

	// シェーダの有効化
	// Enable shader program
	glUseProgram(programId);

	// Uniform変数の転送
	// Transfer uniform variables
	GLuint uid;
	uid = glGetUniformLocation(programId, "u_mvMat");
	glUniformMatrix4fv(uid, 1, GL_FALSE, glm::value_ptr(mvMat));
	uid = glGetUniformLocation(programId, "u_mvpMat");
	glUniformMatrix4fv(uid, 1, GL_FALSE, glm::value_ptr(mvpMat));
	uid = glGetUniformLocation(programId, "u_normMat");
	glUniformMatrix4fv(uid, 1, GL_FALSE, glm::value_ptr(normMat));
	uid = glGetUniformLocation(programId, "u_lightMat");
	glUniformMatrix4fv(uid, 1, GL_FALSE, glm::value_ptr(lightMat));
	uid = glGetUniformLocation(programId, "u_lightPos");
	glUniform3fv(uid, 1, glm::value_ptr(lightPos));
	uid = glGetUniformLocation(programId, "u_contourThreshold");
	glUniform1f(uid, contourThreshold);
	uid = glGetUniformLocation(programId, "u_diffuseThreshold");
	glUniform1f(uid, diffuseThreshold);
	uid = glGetUniformLocation(programId, "u_specularThreshold");
	glUniform1f(uid, specularThreshold);
	uid = glGetUniformLocation(programId, "u_textureSize");
	glUniform2fv(uid, 1, glm::value_ptr(textureSize));

	glActiveTexture(GL_TEXTURE0);
	glBindTexture(GL_TEXTURE_2D, textureId);
	uid = glGetUniformLocation(programId, "u_texture");
	glUniform1i(uid, 0);

	glActiveTexture(GL_TEXTURE1);
	glBindTexture(GL_TEXTURE_2D, textureId_dots);
	uid = glGetUniformLocation(programId, "u_textureDots");
	glUniform1i(uid, 1);

	glActiveTexture(GL_TEXTURE2);
	glBindTexture(GL_TEXTURE_2D, textureId_lines);
	uid = glGetUniformLocation(programId, "u_textureLines");
	glUniform1i(uid, 2);

	// VAOの有効化
	// Enable VAO
	glBindVertexArray(vaoId);

	// 三角形の描画
	// Draw triangles
	glDrawElements(GL_TRIANGLES, indexBufferSize, GL_UNSIGNED_INT, 0);

	// VAOの無効化
	// Disable VAO
	glBindVertexArray(0);

	// シェーダの無効化
	// Disable shader program
	glUseProgram(0);
}

// ウィンドウサイズ変更のコールバック関数
// Callback function for window resizing
void resizeGL(GLFWwindow* window, int width, int height) {
	// ユーザ管理のウィンドウサイズを変更
	// Update user-managed window size
	WIN_WIDTH = width;
	WIN_HEIGHT = height;

	// GLFW管理のウィンドウサイズを変更
	// Update GLFW-managed window size
	glfwSetWindowSize(window, WIN_WIDTH, WIN_HEIGHT);

	// 実際のウィンドウサイズ (ピクセル数) を取得
	// Get actual window size by pixels
	int renderBufferWidth, renderBufferHeight;
	glfwGetFramebufferSize(window, &renderBufferWidth, &renderBufferHeight);

	// ビューポート変換の更新
	// Update viewport transform
	glViewport(0, 0, renderBufferWidth, renderBufferHeight);
}

// アニメーションのためのアップデート
// Update parameters for animation
void animate() {
	theta += 1.0f;  // 1度だけ回転 / Rotate 1 degree of angle
}

int main(int argc, char** argv) {
	// OpenGLを初期化する
	// OpenGL initialization
	if (glfwInit() == GLFW_FALSE) {
		fprintf(stderr, "Initialization failed!\n");
		return 1;
	}

	// OpenGLのバージョン設定 (Macの場合には必ず必要)
	// Specify OpenGL version (mandatory for Mac)
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 4);
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	// Windowの作成
	// Create a window
	GLFWwindow* window = glfwCreateWindow(WIN_WIDTH, WIN_HEIGHT, WIN_TITLE,
		NULL, NULL);
	if (window == NULL) {
		glfwTerminate();
		fprintf(stderr, "Window creation failed!\n");
		return 1;
	}

	// OpenGLの描画対象にwindowを指定
	// Specify window as an OpenGL context
	glfwMakeContextCurrent(window);

	// OpenGL 3.x/4.xの関数をロードする (glfwMakeContextCurrentの後でないといけない)
	// Load OpenGL 3.x/4.x methods (must be loaded after "glfwMakeContextCurrent")
	const int version = gladLoadGL(glfwGetProcAddress);
	if (version == 0) {
		fprintf(stderr, "Failed to load OpenGL 3.x/4.x libraries!\n");
		return 1;
	}

	// バージョンを出力する / Check OpenGL version
	printf("Load OpenGL %d.%d\n", GLAD_VERSION_MAJOR(version), GLAD_VERSION_MINOR(version));

	// ウィンドウのリサイズを扱う関数の登録
	// Register a callback function for window resizing
	glfwSetWindowSizeCallback(window, resizeGL);

	// ユーザ指定の初期化
	// User-specified initialization
	initializeGL();

	// メインループ
	while (glfwWindowShouldClose(window) == GLFW_FALSE) {
		// 描画 / Draw
		paintGL();

		// アニメーション / Animation
		animate();

		// 描画用バッファの切り替え
		// Swap drawing target buffers
		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	// 後処理 / Postprocess
	glfwDestroyWindow(window);
	glfwTerminate();
}